<?php

namespace App\Http\Controllers\Admin;

use App\Http\Requests\UserRequest;
use App\Jobs\Notification\NotifyAboutOrder;
use App\Jobs\Notification\NotifyNewOrder;
use App\Models\Store;
use App\Models\UserOrder;
use Backpack\CRUD\app\Http\Controllers\CrudController;
use Backpack\CRUD\app\Library\CrudPanel\CrudPanelFacade as CRUD;
use Carbon\Carbon;

/**
 * Class UserCrudController
 * @package App\Http\Controllers\Admin
 * @property-read \Backpack\CRUD\app\Library\CrudPanel\CrudPanel $crud
 */
class UserCrudController extends BaseCrudController
{
    use \Backpack\CRUD\app\Http\Controllers\Operations\ListOperation;
    use \Backpack\CRUD\app\Http\Controllers\Operations\CreateOperation;
    use \Backpack\CRUD\app\Http\Controllers\Operations\UpdateOperation {
        update as parentUpdate;
    }
    use \Backpack\CRUD\app\Http\Controllers\Operations\DeleteOperation;
    use \Backpack\CRUD\app\Http\Controllers\Operations\ShowOperation;

    protected function setupListOperation()
    {
        $this->setupFilters();
        parent::setupListOperation(); // TODO: Change the autogenerated stub
    }

    public function setupShowOperation()
    {
        parent::setupShowOperation();
        $this->addRelatedColumn('store', 'number');
        $this->addRelatedColumn('shifts', 'name');
        $this->addRelatedColumn('dates', 'date');
    }

    protected function setupCreateOperation()
    {


        parent::setupCreateOperation(); // TODO: Change the autogenerated stub
        $entry = $this->crud->getCurrentEntry();

        $this->setValidation();
        $this->addRelatedField('store', 'number');
//        dd($this->crud->getRequest()->all());
        $this->addRelatedField('shifts', 'name');

//        $this->addRelatedField('dates', 'date', function ($query) {
//            return $query
//                ->whereBetween('date', [Carbon::now()->startOf('week'), Carbon::now()->endOf('week')])
//                ->get();
//        });
    }

    protected function setupUpdateOperation()
    {
        $this->setupCreateOperation();
    }

    private function setupFilters() {
        $this->crud->addFilter(
            [
                'type'  => 'dropdown',
                'name'  => 'is_online',
                'label' => trans('admin.user.fields.is_online')
            ],
            [
                1 => 'Да',
                0 => 'Нет',
            ],
            function ($value) {
                $this->crud->addClause('where', 'is_online', $value);
            });
        $this->crud->addFilter(
            [
                'type'  => 'select2',
                'name'  => 'store',
                'label' => trans('admin.store.singular')
            ],
            Store::query()->get()->pluck('name', 'id')->toArray(),
            function ($value) {
                $this->crud->addClause('whereHas', 'store', function($query) use ($value) {
                    $query->where('stores.id', $value);
                });
            });
    }

    public function update()
    {
        if (! request('password')) {
            request()->request->remove('password');
        }

        return $this->parentUpdate();
    }
}
